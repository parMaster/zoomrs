server:
  listen: :8099 # port for web frontend and api to listen on
  dbg: true # enable debug mode, can be set to true with --dbg flag when running the service
  domain: localhost
  access_key_salt: secret # used to generate access keys for shared links
  oauth_client_id: secret # Google OAuth Client ID
  oauth_client_secret: secret # Google OAuth Client Secret
  oauth_disable_xsrf: false # disable XSRF protection for OAuth for testing purposes
  jwt_secret: secret # JWT secret - generated by running "openssl rand -hex 32"
  managers: ["example@email.com", "example2@email.com"] # will be able to access meetings list and share links
  sync_job: true
  download_job: true
client:
  account_id: secret # CLI should use separate config with cli-specific account_id,
  id: secret         # id and secret, so that they can be different from the web client,
  secret: secret     # and so that they don't spoil the service auth token every time the CLI is used
  trash_downloaded: false  # CLI should use separate config with cli-specific trash_downloaded, in multi-instance setup
  delete_downloaded: false # trumps trash_downloaded
  delete_skipped: true # delete meetings with duraion < syncable.min_duration? even if this is true, files will not be deleted if delete_downloaded is false, but will be trashed if trash_downloaded is true
  rate_limiting_delay: # ms between looped requests. APIs are grouped into categories with progressively longer delays
    light: 300 # Free acc: 4 requests/second (250ms/request is safe, 300ms/r is extra safe); Pro: 30 r/s; Business: 80 r/s
    medium: 550 # Free acc: 2 r/s; Pro: 20 r/s; Business: 60 r/s
    heavy: 1050 # Free acc: 1 r/s; Pro: 10 r/s; Business: 40 r/s
storage:
  type: sqlite
  path: file:.tmp/data1.db?mode=rwc&_journal_mode=WAL
  repository: .tmp # Path to download files
  keep_free_space: 107374182400 # 100 GB
syncable:
    important: ["shared_screen_with_gallery_view"] # recordings of these types will be downloaded
    alternative: ["shared_screen_with_speaker_view"] # recordings of these types will be downloaded if no important types are available
    optional: ["chat_file"] # recordings of these types will be downloaded if available
    min_duration: 3 # minutes - minimum duration of a meeting to be considered for download
commander:
  instances: ["http://localhost:8099"] # running instances of the service, used to ask them if specific meeting recordings already downloaded