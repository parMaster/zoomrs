server:
  listen: :8099 # port for web frontend and api to listen on
  dbg: true # enable debug mode, can be set to true with --dbg flag when running the service
  domain: localhost
  access_key_salt: secret # used to generate access keys for shared links, run "openssl rand -hex 32" to generate
# Google OAuth credentials. Used in web client to auth users, can be left like this if not using web client
  oauth_client_id: secret # Google OAuth Client ID
  oauth_client_secret: secret # Google OAuth Client Secret
  oauth_disable_xsrf: false # disable XSRF protection for OAuth for testing purposes
  jwt_secret: secret # JWT secret - generated by running "openssl rand -hex 32"
  managers: ["example@email.com", "example2@email.com"] # will be able to access meetings list and share links on the web client
  sync_job: true # enable sync job - server will periodically check for new recordings and store the list in the database
  download_job: true # server will periodically check the list in the database and download those with status "pending"
client:
# Zoom API credentials. CLI should use separate config with cli-specific credentials, so that they don't spoil the service auth token every time the CLI is used
  account_id: secret # Zoom account id - see "Zoom API credentials" in README
  id: secret         # Zoom API key id
  secret: secret     # Zoom API key secret
# How to handle downloaded recordings in Zoom Cloud
  trash_downloaded: false  # Trash downloaded recordings - they will be moved to trash in Zoom Cloud, deleted after 30 days and won't be counted towards the storage quota
  delete_downloaded: false # Delete downloaded recordings - they will be ermanently deleted from Zoom Cloud. Trash is preferred over deletion
  delete_skipped: true # delete meetings with duraion < syncable.min_duration? even if this is true, files will not be deleted if delete_downloaded is false, but will be trashed if trash_downloaded is true
  cloud_capacity_hard_limit: 429496729600 # 400 GB - don't allow cloud storage to grow more than this value. Look up 'cloudcap' in README for more info.
  rate_limiting_delay: # ms between looped requests. APIs are grouped into categories with progressively longer delays
    light: 300 # Free acc: 4 requests/second (250ms/request is safe, 300ms/r is extra safe); Pro: 30 r/s; Business: 80 r/s
    medium: 550 # Free acc: 2 r/s; Pro: 20 r/s; Business: 60 r/s
    heavy: 1050 # Free acc: 1 r/s; Pro: 10 r/s; Business: 40 r/s
storage:
  type: sqlite # sqlite is fast enough, embedded, simple and reliable
  path: file:/tmp/zoomrs_test_data.db?mode=rwc&_journal_mode=WAL # path to the database file. Remember to properly map this path running in Docker
  repository: /tmp # Path to download files. Remember to properly map this path running in Docker
# Keep at least this much free space on disk (where the storage.repository is located). Evict old recordings from the repository until this condition satisfied.
  keep_free_space: 107374182400 # bytes (100 GB)
syncable:
    important: ["shared_screen_with_gallery_view"] # recordings of these types will be downloaded
    alternative: ["shared_screen_with_speaker_view"] # recordings of these types will be downloaded if no important types are available
    optional: ["chat_file"] # recordings of these types will be downloaded if available
    min_duration: 3 # minutes - minimum duration of a meeting to be considered for download. client.delete_skipped set to true will trash shorter meetings
commander:
  instances: ["http://localhost:8099"] # running instances of the service, used to ask them if specific meeting recordings already downloaded